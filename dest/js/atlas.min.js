// CONSTANTS
// *****************************************************************************

var tTableStartPerformance = performance.now();

const table = $('#orgs');

const tableCols = [
    "name",
    "category"
];

const tableColumnTitles = [
    "Report Name",
    "Category"
];

_data = {};
sessionStorage.clear();

// INIT ******************************************
getFirebaseOrganizationData();
createTableHeader();

// SEARCH TEXT BOX CHANGE
$(".filter").keypress(function(e) {
    if (e.which == 13) {
        refreshTableData($(this).val());
    }
});

var titles = document.getElementsByTagName("th"); 

for ( var i = 0, len = titles.length; i < len; i++ ) { 
    var title = document.getElementById(i);
    console.log(title)
    title.onclick = function(){
        sortTable($(title).attr('id'), asc);
    }
    //titles[i].addEventListener("click", console.log('this worked?'));  
}

function hydrateView() {
    console.log('hydrateView');
    loadSearchFilters();
    refreshTableData('');
}

function getSelectedTableFilters() {
    console.log('getSelectedTableFilters');
    var filters = [];
    for (var index in tableCols) {
        var selectedValues = $('select#' + tableCols[index]).val();
        if (selectedValues && selectedValues.length > 0) {
            filters[index] = selectedValues;
        }
    }
    return filters;
}


function filterData(filters) {
    console.log('filterData');
    var filteredRecords = {};

    if (filters) {
        for (var key in _data) {
            var row = _data[key];
            // Check filters
            var addToDisplay = true;
            for (var i in filters) {

                if (filters[i] && filters[i].length > 0) {
                    var result = (filters[i].includes(row[tableCols[i]]));
                    for (var j in filters[i]) {
                        if (row[tableCols[i]].includes(filters[i][j])) {
                            console.log((row[tableCols[i]], filters[i][j]))
                            result = true;
                            break
                        }
                    }
                    if (result === false) {
                        addToDisplay = false;
                        break;
                    }
                }
            }
            if (addToDisplay) {
                filteredRecords[key] = row;
            }
        }
    }
    return filteredRecords;
}
// LOAD TABLE
// *****************************************************************************
function refreshTableData(query) {
    console.log('refreshTableData');
    // note: query param was never used! TODO?
    // Filter data on query, show first 10.

    $("tbody tr").remove();
    // createTableHeaders();

    var filters = getSelectedTableFilters();
    var recordsToDisplay = filterData(filters);

    createTableBody(recordsToDisplay);

    // var rows = document.getElementsByTagName("tr").length;
    // var msg = ' entries';
    // if(rows === 1) {
    //     msg = ' entry';
    // }
    // $('#row-count').html(rows + msg);

    jQuery(document).ready(function($) {

        var tEnd = performance.now();
        console.log("from start to ready took " + (tEnd - tTableStartPerformance) + " milliseconds.")

        // $("tr").click(function() {
        //     console.log($(this).attr('id'));
        //     window.location = "http://www.sciencepolicyatlas.com/organization?org=" + $(this).attr('id');
        // });
    });
}

function getRecord(name) {
    console.log('getRecord');
    var ref = new Firebase('https://atlas-new-format.firebaseio.com/resources');

    ref.orderByChild('organization_name').startAt(name).endAt(name).once('value', function(snapshot) {
        snapshot.forEach(function(childSnapshot) {

            var key = childSnapshot.key();
            var data = childSnapshot.val();

            console.log(data);
            var v = data.child("downloadURL").val();
            console.log(v);
            if (data) {
                window.location = data.child("downloadURL").val();
            }
        });
    });
    return;

    // $.ajax({
    //     type: "GET",
    //     dataType: "jsonp",
    //     data: JSON.stringify(name),
    //     url: "https://atlas-new-format.firebaseio.com/organizations/.json?",
    // https://atlas-organizations.firebaseio.com/.json",
    // ?orderBy=\"organizations\"",
    //     success: function(data) {
    //         if(data) {
    //             window.location = "http://www.sciencepolicyatlas.com/organization?org=" + data;
    //         }
    //        // hydrateView();

    //     }
    // });
}

function createTableBody(list) {
    console.log('createTableBody');
    // Add the header first
    //  console.log(list);
    var count = 0;
    for (var pos in list) {
        table.find('tbody:last').append(createTableRow(pos, list[pos]));
        ++count;
    }
    var msg = " reports match these search results. See ";
    msg += '<a target="_top" href="http://www.sciencepolicyatlas.com/" style = "color: #ffffff">' + "tips" + "</a>";
    msg += " for leveraging the Atlas.";
    if(count === 1) {
        msg = " report matches these search results. See" + '<a target="_top" href="http://www.sciencepolicyatlas.com/" style = "color: #ffffff">' + "tips" + "</a>" + "for leveraging the Atlas.";
    }
    $('#row-count').html(count + msg);  
}

function createTableRow(id, org) {
    console.log('createTableRow');

    var string = "<tr id='" + id + "'>";
    for (var i in tableCols) {
        var column = tableCols[i];

        string += "<td class=" + column + ">";
        if (column == 'name') {
            string += "<a target=\"_top\" href=\"http://www.sciencepolicyatlas.com/organization?org=" + id + "\">" + org[column] + "</a>";
        }
        else {
            string += org[column];
        }
        string += "</td>\n";
    }
    return string;
}

function createTableHeader() {
    console.log('createTableHeader');
    var string = "<tr>";
    for (var i = 0; i < tableColumnTitles.length; i++) {
        string += "<th id=" + i + ">" + tableColumnTitles[i] + "</th>";
    }
    string += "</tr>";
    table.find('thead').append(string);
}

function getsessionStorage() {
    var d = sessionStorage.getItem('data');
    var data = JSON.parse(d);
    return data;
}

function setsessionStorage(data) {
    if (data) {
        var dataToStore = JSON.stringify(data);
        sessionStorage.setItem('data', dataToStore);
    }
}

function getFirebaseOrganizationData() {
    var tTableStartPerformance = performance.now();
    var sData = getsessionStorage();
    if (sData) {
        _data = sData;
        hydrateView();

        var pn = performance.now();
        console.log("hydrateView using session data took " + (pn - tTableStartPerformance) + " milliseconds.")
        return;
    }

    console.log('getFirebaseResourceData');
    $.ajax({
        type: "GET",
        dataType: "jsonp",
        url: "https://atlas-new-format.firebaseio.com/resources/.json",
        success: function(data) {
            _data = data;
            var tEnd = performance.now();
            console.log("getFirebaseResourceData took " + (tEnd - tTableStartPerformance) + " milliseconds.")
            hydrateView();
            var tEnd2 = performance.now();
            console.log("hydrateView took " + (tEnd2 - tEnd) + " milliseconds.")
            setsessionStorage(_data);
        }
    });
}

// LOAD TABLE
// *****************************************************************************
function loadSearchFilters() {
    console.log('loadSearchFilters');
    for (var i in tableCols) {
        createFilterFor(tableCols[i]);
    }
    $(".chosen-select").chosen().change(function(evt, params) {
        refreshTableData($(".filter").val());
    });
}

function asc(s1, s2) {
    var s1lower = s1.toLowerCase();
    var s2lower = s2.toLowerCase();
    return s1lower > s2lower ? 1 : (s1lower < s2lower ? -1 : 0);
}

function desc(s1, s2) {
    var s1lower = s1.toLowerCase();
    var s2lower = s2.toLowerCase();
    return s1lower < s2lower ? 1 : (s1lower > s2lower ? -1 : 0);
}

function sortTable(col,dir){
    console.log(col);
    var rows = $('#livefeeds tbody  tr').removeClass('row_alt').get();
    var t=1;
    if(!dir || dir=='dec') {
        t=-1;
    } else if(dir=='asc') {
        t=1;
    }
    rows.sort(function(a, b) {
        var A = $(a).children('td').eq(col).text().toUpperCase();
        var B = $(b).children('td').eq(col).text().toUpperCase();
        if(A <b> B) {
            return t;
        }
        return 0;
    });
    $.each(rows, function(index, row) {
        $('#livefeeds').children('tbody').append(row);
        if( index%2 == 1){
            $(row).addClass('row_alt');
        }
    });
}

function sortIt(dropdownkey) {
    var id = '#' + dropdownkey;
    var theOptions = $(id + " option");
    if (theOptions.length > 0) {

        // var my_options = $("#my-dropdown option");
        theOptions.sort(function(a, b) {
            if (a.text > b.text) return 1;
            else if (a.text < b.text) return -1;
            else return 0
        })
        $(id).empty(); //.append(theOptions);
        $(id).chosen({ no_results_text: "No results matched" });
    }
}

function createFilterFor(key) {
    console.log('createFilterFor');
    var options = [];
    for (var rec in _data) {

        // multiple collaborations on one line comma delimited
        // var values = _data[org][key] ? _data[org][key].split(", ") : "";

        var values = [_data[rec][key]]

        if (values.length > 0) {
            for (var n in values) {
                var value = values[n];
                value = value.trim();

                // already in filter?
                if ($.inArray(value, options) === -1) {
                    options.push(value);
                }
            }
        }
    }
    // 
    options.sort(asc);

    var string = '<select id="' + key + '" class="chosen-select" multiple="' + options.length + '">';

    for (var i = 0; i < options.length; i++) {
        string += '<option value="' + options[i] + '">' + options[i] + '</option>';
    }
    string += '</select>';
    $("#options").append(string);

    var l = key.indexOf('_') > -1 ? key.indexOf('_') : key.length;
    var placeHolder = key.substr(0, l);

    placeHolder = placeHolder.charAt(0).toUpperCase() + placeHolder.substr(1);

    $("#" + key).chosen({
        no_results_text: "Oops, nothing found!",
        width: "90%",
        allow_single_deselect: true,
        placeholder_text_multiple: placeHolder,
    });

}
